{
    "version": "240701",
    "description": "ja-netfilter all in one",
    "homepage": "https://jetbra.in/s",
    "license": {
        "identifier": "GPL-3.0-only",
        "url": "https://github.com/ja-netfilter/ja-netfilter/blob/master/LICENSE"
    },
    "notes": [
        "Use checkver of scoop tool to update new version,like: iex \"$env:SCOOP\\apps\\scoop\\current\\bin\\checkver.ps1 -app $env:SCOOP\\buckets\\xbo\\bucket\\ja-netfilter-all.json -f\"",
        "Configure as described in \"$dir\\readme.txt\"! For testing purposes only, not for commercial use!"
    ],
    "url": "https://ipfs.io/ipfs/bafybeih65no5dklpqfe346wyeiak6wzemv5d7z2ya7nssdgwdz4xrmdu6i/files/jetbra-8f6785eac5e6e7e8b20e6174dd28bb19d8da7550.zip",
    "hash": "d5d543ee8643264f50f1f30462daaa80a4f9a07e11c0bc88b48ae0893786e865",
    "extract_dir": "jetbra",
    "checkver": {
        "script": [
            "function MatchField([String] $text,[String] $regExpr){",
            "   $regex = New-Object System.Text.RegularExpressions.Regex($regExpr)",
            "   $match = $regex.Matches($text) | Select-Object -First 1",
            "   if ($match -and $match.Success){",
            "       return $match.Groups[1].value",
            "   }",
            "   return ''",
            "}",
            "function CheckUri([String] $uri){",
            "   try{",
            "       $response=invoke-webrequest $uri  -DisableKeepAlive -UseBasicParsing -Method head -SkipHttpErrorCheck -TimeoutSec 5",
            "       return $response.StatusCode -eq 200",
            "   }catch{",
            "       return $False",
            "   }",
            "}",
            "$wc = New-Object Net.Webclient",
            "$page1=$wc.DownloadString('https://jetbra.in/s')",
            "$version=MatchField $page1 \"page\\(([\\d]+)\\)\"",
            "$page2=$wc.DownloadString('https://3.jetbra.in/index.min.js')",
            "$hash=MatchField $page2 'var\\sO=\"(\\w+)\"'",
            "$matches=(New-Object System.Text.RegularExpressions.Regex('((\\w+)://([^/:]+)(:\\d*)?/(ipfs/)?):hash/')).Matches($page2)",
            "$sha1='';$sha1Uri=''",
            "foreach ($item in $matches) {",
            "   $target=$item.Groups[1].value+$hash",
            "   debug $target",
            "   if(CheckUri $target){",
            "       $sha1Uri=$target",
            "       $page3=$wc.DownloadString($sha1Uri)",
            "       $sha1=MatchField $page3 'jetbra-(\\w+).zip'",
            "       if (!$sha1) {continue}",
            "       break",
            "   }",
            "}",
            "$checkver=\"version=\"+$version+\",hash=\"+$hash+\",sha1=\"+$sha1+\",target=\"+$sha1Uri",
            "debug $checkver",
            "return $checkver"
        ],
        "regex": "version=(?<version>\\d+),hash=(?<hash>\\w+),sha1=(?<sha1>\\w+),target=(?<target>\\S+)"
    },
    "autoupdate": {
        "url": "$matchTarget/files/jetbra-$matchSha1.zip"
    }
}
